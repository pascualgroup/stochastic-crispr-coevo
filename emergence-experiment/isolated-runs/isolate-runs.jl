#!/usr/bin/env julia

"""
This script gathers the output generated by the sweep in `generate-sweep.jl`
into a single SQLite database.
This is probably more than you want, but it shows generally how to consolidate
things.
"""

println("(Julia compilation delay...)")

using SQLite
import SQLite.DBInterface.execute

## Define Paths ##
SCRIPT_PATH = abspath(dirname(PROGRAM_FILE))
dbSimPath = joinpath(SCRIPT_PATH,"..","simulation","sweep_db_gathered.sqlite") # cluster
# dbSimPath = joinpath("/Volumes/Yadgah/crispr-sweep-13-1-2021/simulation/sweep_db_gathered.sqlite") # local
dbSim = SQLite.DB(dbSimPath)
##

run_ids = map(x->parse(Int64,x), ARGS)
function main()
    for run in run_ids
        println("Isolating run $(run)...")
        (cr,) = execute(dbSim,"SELECT combo_id,replicate FROM runs WHERE run_id = $(run)")
        repDir = "runID$(run)-c$(cr[1])-r$(cr[2])"
        if !ispath(joinpath(SCRIPT_PATH,"isolates",repDir))
            mkpath(joinpath(SCRIPT_PATH,"isolates",repDir))
        end
        dbOutput = SQLite.DB(joinpath(SCRIPT_PATH,"isolates",repDir,"$(repDir).sqlite"))
        #dbOutput = SQLite.DB(joinpath("/Volumes/Yadgah/","run_id$(run)_combo$(cr[1])_replicate$(cr[2]).sqlite"))
        println("...attaching database...")
        execute(dbOutput, "ATTACH DATABASE '$(dbSimPath)' as dbSim")
                println("Database Attached")

        for table_name in ["babundance","bspacers","bgrowthrates","bstrains","summary","vabundance","vpspacers","vstrains"]
            println("Table Name: $(table_name)")
            tableCols = ["$(table_info.name)" for table_info in execute(dbSim,"PRAGMA table_info($(table_name))")]
            tableColsType = ["$(table_info.name) $(table_info.type)" for table_info in execute(dbSim,"PRAGMA table_info($(table_name))")]
            numCols = length(tableCols)
            colStmt = join(tableCols,", ")
            colTypeStmt = join(tableColsType,", ")
            execute(dbOutput, "BEGIN TRANSACTION")
            println("Creating Table")
            execute(dbOutput, "CREATE TABLE $(table_name) ($(colTypeStmt...))")
            println("Loading $(table_name) data")
            execute(dbOutput, "INSERT INTO $(table_name)($(colStmt)) SELECT $(colStmt)
            FROM dbSim.$(table_name) WHERE run_id = $(run);")
            println("Table Created")
            execute(dbOutput, "COMMIT")
        end

        println("Table Name: param_combos & runs")
        tableNamesTypes = ["$(table_info.name) $(table_info.type)" for table_info in execute(dbSim,"PRAGMA table_info(param_combos)")]
        tableNamesTypes = join(tableNamesTypes,", ")
        println("...creating tables...")
        execute(dbOutput, "CREATE TABLE runs (run_id INTEGER, combo_id INTEGER, replicate INTEGER)")
        execute(dbOutput, "CREATE TABLE param_combos ($(tableNamesTypes...))")
        println("Tables Created")
        tableNames = ["$(table_info.name)" for table_info in execute(dbSim,"PRAGMA table_info(param_combos)")]
        tableNames = join(tableNames,", ")
        execute(dbOutput, "BEGIN TRANSACTION")
        println("...loading param_combos & runs data...")
        execute(dbOutput,"INSERT INTO param_combos($(tableNames)) SELECT * FROM dbSim.param_combos")
        execute(dbOutput,"INSERT INTO runs (run_id, combo_id, replicate) SELECT run_id, combo_id, replicate FROM dbSim.runs")
        execute(dbOutput, "COMMIT")

        (numSpacers,) = execute(dbSim,"SELECT n_spacers_max FROM param_combos WHERE combo_id = $(cr[1])")
        numSpacers = numSpacers[1]
        (numPspacers,) = execute(dbSim,"SELECT n_protospacers FROM param_combos WHERE combo_id = $(cr[1])")
        numPspacers = numPspacers[1]
        spacersColStmt = join(collect(1:numSpacers),",  ")
        spacersTypeStmt = join(["$(i) INTEGER" for i in 1:numSpacers],", ")
        pspacersColStmt = join(collect(1:numPspacers),",  ")
        pspacersTypeStmt = join(["$(i) INTEGER" for i in 1:numPspacers],", ")
    end
end

main()
println("Runs successfully isolated!")
