#!/usr/bin/env julia

"""
This script gathers the output generated by the sweep in `generate-sweep.jl`
into a single SQLite database.
This is probably more than you want, but it shows generally how to consolidate
things.
"""

println("(Annoying Julia compilation delay...)")

using SQLite
import SQLite.DBInterface.execute

analysisType = ARGS[1]

if analysisType == "evophases"
    error("Phase analysis does not require gathering of data.")
end

SCRIPT_PATH = abspath(dirname(PROGRAM_FILE))

function main()
    an_dir = joinpath("gathered-analyses",analysisType)
    if !ispath(an_dir)
        mkpath(an_dir)
    end

    if !isfile(joinpath(analysisType,"mean$(analysisType)jobs.sqlite")) # cluster
        error("mean$(analysisType)jobs.sqlite is missing; please run analysis first") # cluster
    end # cluster
    combo_pairs = let
        db = SQLite.DB(joinpath(analysisType,"mean$(analysisType)jobs.sqlite"))
        [(combo_id, combo_dir) for (combo_id, combo_dir) in execute(db, "SELECT combo_id, run_dir FROM job_runs")]
    end

    is_first = true
    table_names = []
    for (combo_id, combo_dir) in combo_pairs
        combodb_path = joinpath(analysisType,combo_dir, "mean-$(analysisType)_output.sqlite")

        if !ispath(combodb_path)
            println("Missing: $(combodb_path)")
            continue
        else
            println("Processing: $(combodb_path)")
        end

        # Start up new connection; weird things seem to happen with attached databases otherwise
        db = SQLite.DB(joinpath(an_dir,"mean-$(analysisType).sqlite"))
        execute(db, "BEGIN TRANSACTION")

        # Connect to output database as sub-db inside connection
        execute(db, "ATTACH DATABASE '$(joinpath(analysisType,combo_dir, "mean-$(analysisType)_output.sqlite"))' as combodb")
        # If this is the first run, initialize tables
        if is_first
            for (table_name, sql) in execute(
                db, "SELECT tbl_name, sql FROM combodb.sqlite_master WHERE type = 'table' AND name NOT LIKE 'sqlite_%';"
            )
                #if table_name == "meta"
                    #continue
                #end

                # Use original SQL to create table with the same columns
                execute(db, sql)

                # Add a run_id column
                execute(db, "ALTER TABLE $(table_name) ADD COLUMN combo_id INTEGER")

                push!(table_names, table_name)
            end

            is_first = false
        end

        # Copy all data from single-run DB into consolidated DB
        #execute(db, "INSERT INTO run_meta SELECT ?, * FROM combodb.meta", (run_id,))
        for table_name in table_names
            execute(db, "INSERT INTO $(table_name) SELECT *, ? FROM combodb.$(table_name)", (combo_id,))
        end

        execute(db, "COMMIT")
    end

    dbOutput = SQLite.DB(joinpath(an_dir,"mean-$(analysisType).sqlite"))
    dbSimInfoPath = joinpath(SCRIPT_PATH,"..","simulation","sweep_db.sqlite") # cluster
    #run(`cd`) # local
    #dbSimInfoPath = joinpath("/Volumes/Yadgah/sweep_db.sqlite") # local
    dbSimInfo = SQLite.DB(dbSimInfoPath)
    tableNamesTypes = ["$(table_info.name) $(table_info.type)" for table_info in execute(dbSimInfo,"PRAGMA table_info(param_combos)")]
    tableNamesTypes = join(tableNamesTypes,", ")
    execute(dbOutput, "CREATE TABLE runs (run_id INTEGER, combo_id INTEGER, replicate INTEGER)")
    execute(dbOutput, "CREATE TABLE param_combos ($(tableNamesTypes...))")
    tableNames = ["$(table_info.name)" for table_info in execute(dbSimInfo,"PRAGMA table_info(param_combos)")]
    tableNames = join(tableNames,", ")
    execute(dbOutput, "BEGIN TRANSACTION")
    execute(dbOutput,"ATTACH DATABASE '$(dbSimInfoPath)' as dbSimInfo")
    execute(dbOutput,"INSERT INTO param_combos($(tableNames)) SELECT * FROM dbSimInfo.param_combos")
    execute(dbOutput,"INSERT INTO runs (run_id, combo_id, replicate) SELECT run_id, combo_id, replicate FROM dbSimInfo.runs")
    execute(dbOutput, "COMMIT")
end

main()
